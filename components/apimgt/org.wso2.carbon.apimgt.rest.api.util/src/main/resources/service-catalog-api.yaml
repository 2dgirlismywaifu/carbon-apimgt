#   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#---------------------------------------------------------------------------

openapi: "3.0.0"
info:
  title: Service Catalog APIs
  description: |
    This specifies a **RESTful API** for Service Catalog.
  version: "1.0"
servers:
  - url: 'https://apis.wso2.com/api/service-catalog/v1'
  - url: 'http://apis.wso2.com/api/service-catalog/v1'

paths:
  /service-catalogs:
    #-----------------------------------------------------
    # Retrieve the array of all Service Catalogs
    #-----------------------------------------------------
    get:
      summary: |
        Retrieve all Service Catalogs
      description: |
        This operation provides you an array of available Service Catalogs.
      tags:
        - Service Catalog
      security:
        - default:
          - service_catalog:view
      operationId: getServiceCatalogs
      responses:
        200:
          description: |
            OK.
            Array of Service Catalogs is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCatalogArray'

    #-----------------------------------------------------
    # Create a new Service Catalog
    #-----------------------------------------------------
    post:
      summary: Create a new Service Catalog
      description: |
        This operation can be used to create a new Service Catalog specifying the details of the Service Catalog
        in the payload.
      security:
        - default:
          - service_catalog:create
      tags:
        - Service Catalog
      operationId: addServiceCatalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCatalog'
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created Service Catalog object as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCatalog'
        "405":
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "415":
          description: |
            Unsupported Media Type.
            The entity of the request was in a not supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /service-catalogs/{catalogId}:
    #-----------------------------------------------------
    # Retrieve the details of a Service Catalog
    #-----------------------------------------------------
    get:
      summary: Get details of a Service Catalog
      description: |
        Using this operation, you can retrieve complete details of a single Service Catalog using the CatalogId.
      security:
        - default:
          - service_catalog:view
      tags:
        - Service Catalog
      operationId: getServiceCatalogByUUID
      parameters:
      - name: catalogId
        in: path
        description: ID of the Service Catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Requested Service Catalog is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCatalog'
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #-----------------------------------------------------
    # Update an existing Service Catalog
    #-----------------------------------------------------
    put:
      summary: Update an existing Service Catalog
      description: |
        This operation can be used to update an existing Service Catalog
      security:
        - default:
          - service_catalog:manage
      tags:
        - Service Catalog
      operationId: updateServiceCatalog
      parameters:
      - name: catalogId
        in: path
        description: ID of the Service Catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCatalog'
      responses:
        "200":
          description: |
            OK.
            Updated Service Catalog is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCatalog'
        "400":
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #-----------------------------------------------------
    # Delete an Service Catalog
    #-----------------------------------------------------
    delete:
      summary: Delete an Service Catalog
      description: |
        This operation can be used to delete an existing Service Catalog proving the Id of the Service Catalog.
      security:
        - default:
          - service_catalog:delete
      tags:
       - Service Catalog
      operationId: deleteServiceCatalog
      parameters:
      - name: catalogId
        in: path
        description: uuid of the Service Catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: |
            Successfully deleted.
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Registry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #-----------------------------------------------------
  # Retrieve all entries in a Service Catalog
  #-----------------------------------------------------
  /service-catalogs/{catalogId}/entries:
    get:
      summary: Get All entries in the registry
      operationId: getAllEntriesInCatalog
      security:
        - default:
          - service_catalog:entry_view
      tags:
        - Service Catalog Entries
      parameters:
      - name: catalogId
        in: path
        description: uuid of the Service Catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: query
        description: Version of the Catalog Entry
        schema:
          type: string
      - name: serviceType
        in: query
        description: |
          **Search condition**.

          Filter entries by serviceType
        schema:
          type: string
          enum:
          - REST
          - SOAP_1_1
          - GQL
          - WS
      - name: definitionType
        in: query
        description: |
          Filter catalog entries by definitionType
        schema:
          type: string
          enum:
          - OAS
          - WSDL1
          - WSDL2
          - GQL_SDL
      - name: name
        in: query
        description: |
          Filter catalog entries by the name of the Entry
        schema:
          type: string
      - name: displayName
        in: query
        description: |
          Filter catalog entries by the display name of the Entry
        schema:
          type: string
      - name: serviceCategory
        in: query
        description: |
          Filter catalog entries by the service category of the Entry
        schema:
          type: string
          enum:
          - UTILITY
          - EDGE
          - DOMAIN
      - name: sortEntryBy
        in: query
        schema:
          type: string
          enum:
            - definitionType
            - serviceType
      - name: sortEntryOrder
        in: query
        schema:
          type: string
          enum:
            - asc
            - desc
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      responses:
        "200":
          description: |
             Array of entries in Registry is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntryArray'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #-----------------------------------------------------
  # Create new entry in entry in Service Catalog
  #-----------------------------------------------------
    post:
      summary: Create a new Service Catalog Entry
      description: |
        This operation can be used to create a new Service Catalog Entry specifying the details of the Entry in the
        payload.
      security:
        - default:
          - service_catalog:entry_write
      tags:
        - Service Catalog Entries
      operationId: createCatalogEntry
      parameters:
      - name: catalogId
        in: path
        description: uuid of the Service Catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CatalogEntrySchema'
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created Service Catalog Entry as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntry'
        405:
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        415:
          description: |
            Unsupported Media Type.
            The entity of the request was in a not supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /service-catalogs/{catalogId}/entries/{entryId}:
    #-----------------------------------------------------
    # Retrieve an entry in a Service Catalog
    #-----------------------------------------------------
    get:
      summary: Retrieve a specific Entry in a Catalog
      description: |
        Using this operation, you can retrieve a specific entry in a single Catalog using the EntryId and CatalogId.
      security:
        - default:
          - service_catalog:entry_view
      operationId: getCatalogEntryByUuid
      tags:
        - Service Catalog Entries
      parameters:
      - name: catalogId
        in: path
        description: uuid of the Service Catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: entryId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            Requested Entry in Catalog is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntryArray'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog or Entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #-----------------------------------------------------
    # Update an entry in a Service Catalog
    #-----------------------------------------------------
    put:
      summary: Update an existing Entry in a Service Catalog
      description: |
        This operation can be used to update an existing Entry in Service Catalog with the details of the Entry in the
         payload.
      security:
        - default:
          - service_catalog:entry_write
      operationId: updateCatalogEntry
      tags:
        - Service Catalog Entries
      parameters:
      - name: catalogId
        in: path
        description: uuid of the catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: entryId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CatalogEntrySchema'
      responses:
        "200":
          description: |
            Updated.
            Successful response with the newly updated Catalog Entry as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogEntry'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog or Entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    #-----------------------------------------------------
    # Delete an entry in a Service Catalog
    #-----------------------------------------------------
    delete:
      summary: Delete an Entry in a Service Catalog
      description: |
        This operation can be used to delete an existing Entry in Catalog by specifying the catalogId and entryId.
      security:
        - default:
          - service_catalog:entry_write
      operationId: deleteCatalogEntry
      tags:
        - Service Catalog Entries
      parameters:
      - name: catalogId
        in: path
        description: uuid of the catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: entryId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: |
            Successfully deleted the catalog entry.
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog or Entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #-----------------------------------------------------
  # Retrieve definition file of an entry in Service Catalog
  #-----------------------------------------------------
  /service-catalogs/{catalogId}/entries/{entryId}/definition:
    get:
      summary: Retrieve the definition file of a specific Entry in a Catalog
      description: |
        Using this operation, you can retrieve the definition file of a specific entry in a Catalog using the EntryId
        and CatalogId.
      security:
        - default:
          - service_catalog:entry_view
      operationId: getCatalogEntryDefinition
      tags:
        - Service Catalog Entries
      parameters:
      - name: catalogId
        in: path
        description: uuid of the catalog
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: entryId
        in: path
        description: uuid of the catalog entry
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            Updated.
            Successful response with the definition file as entity in the body.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service Catalog or Entry does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ######################################################
  # The Service Catalog settings List
  ######################################################
  /settings:
    #-----------------------------------------------------
    # Retrieve Service Catalog settings
    #-----------------------------------------------------
    get:
      summary: Retrieve Service Catalog settings
      description: |
        Retrieve Service Catalog settings
      operationId: getSettings
      tags:
        - Settings
      responses:
        "200":
          description: |
            OK.
            Settings returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        "404":
          description: |
            Not Found.
            Requested Settings does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  #-------------------------------------------------------
  # The security schemes of resources used by some of the APIs
  #-------------------------------------------------------
  securitySchemes:
    default:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            service_catalog:view: view service catalog
            service_catalog:create: create service catalog
            service_catalog:manage: update service catalog
            service_catalog:delete: delete service catalog
            service_catalog:entry_view: view service catalog entry
            service_catalog:entry_write: write service catalog entry

  #-------------------------------------------------------
  # The definitions of resources used by some of the APIs
  #-------------------------------------------------------
  schemas:

    #-----------------------------------------------------
    # The Service Catalog resource
    #-----------------------------------------------------
    ServiceCatalog:
      type: object
      title: Service Catalog object
      required:
        - name
      properties:
        name:
          type: string
        displayName:
          type: string
          example: Dev Service Catalog
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        type:
          type: string
          example: wso2
          enum:
          - wso2
        owner:
          type: string
          example: admin
        description:
          type: string
          example: A sample description about the Service Catalog

    #-----------------------------------------------------
    # The Service Catalog Array resource
    #-----------------------------------------------------
    ServiceCatalogArray:
      type: array
      title: Service Catalog Array
      items:
        $ref: '#/components/schemas/ServiceCatalog'

    #-----------------------------------------------------
    # The Service Catalog Entry Array resource
    #-----------------------------------------------------
    CatalogEntryArray:
      type: array
      title: Service Catalog Entry Array
      items:
        $ref: '#/components/schemas/CatalogEntry'

    #-----------------------------------------------------
    # The Service Catalog Entry resource
    #-----------------------------------------------------
    CatalogEntry:
      type: object
      title: The Service Catalog Entry object
      required:
        - entryName
        - version
        - serviceType
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        entryName:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        displayName:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        description:
          type: string
          example: A Catalog Entry that exposes a REST endpoint
        version:
          type: string
          example: v1
        serviceUrl:
          type: string
          example: http://localhost/pizzashack
        serviceCategory:
          type: string
          description: "Business Category of the Endpoint"
          enum:
          - UTILITY
          - EDGE
          - DOMAIN
        serviceType:
          description: Type of the backend connecting to
          type: string
          example: REST
          enum:
          - REST
          - SOAP_1_1
          - GQL
          - WS
          - GRPC
          - ASYNC_API
        definitionType:
          type: string
          description: The type of the provided API definition
          example: OAS
          enum:
          - OAS
          - WSDL1
          - WSDL2
          - GQL_SDL
        definitionUrl:
          type: string
          example: http://localhost/pizzashack?swagger.json

    #-----------------------------------------------------
    # The Service Catalog Entry Schema resource
    #-----------------------------------------------------
    CatalogEntrySchema:
      type: object
      title: The Service Catalog Entry Schema object
      required:
        - catalogEntry
        - definitionFile
      properties:
        catalogEntry:
          $ref: '#/components/schemas/CatalogEntry'
        definitionFile:
          type: string
          format: binary

    #-----------------------------------------------------
    # The settings resource
    #-----------------------------------------------------
    Settings:
      title: SettingsDTO
      properties:
        scopes:
          type: array
          items:
            type: string

    #-----------------------------------------------------
    # The Error resource
    #-----------------------------------------------------
    Error:
      type: object
      title: Error object returned with 4XX HTTP Status
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
        moreInfo:
          type: string
          description: |
            Preferably an url with more details about the error.
        error:
          type: array
          description: |
            If there are more than one error list them out.
            For example, list out validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'

    #-----------------------------------------------------
    # The Error List Item resource
    #-----------------------------------------------------
    ErrorListItem:
      type: object
      title: Description of individual errors that may have occurred during a request.
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
          description: |
            Description about individual errors occurred
        description:
          type: string
          description: |
            A detail description about the error message.

######################################################
# Parameters - required by some of the APIs above
######################################################
  parameters:

    #-----------------------------------------------------
    # The limit resource - The maximum number of resources to be returned by a GET
    #-----------------------------------------------------
    limit:
      name: limit
      in: query
      description: |
        Maximum limit of items to return.
      required: false
      schema:
        type: integer
        default: 25

    #-----------------------------------------------------
    # The offset resource - The order number of an instance in a qualified set of
    # resources at which to start to return the next batch of qualified resources
    #-----------------------------------------------------
    offset:
      name: offset
      in: query
      description: |
        Starting point within the complete list of items qualified.
      required: false
      schema:
        type: integer
        default: 0
